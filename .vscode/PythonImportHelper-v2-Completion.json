[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "get_asgi_application",
        "importPath": "django.core.asgi",
        "description": "django.core.asgi",
        "isExtraImport": true,
        "detail": "django.core.asgi",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "customer.models",
        "description": "customer.models",
        "isExtraImport": true,
        "detail": "customer.models",
        "documentation": {}
    },
    {
        "label": "Customer",
        "importPath": "customer.models",
        "description": "customer.models",
        "isExtraImport": true,
        "detail": "customer.models",
        "documentation": {}
    },
    {
        "label": "History",
        "importPath": "customer.models",
        "description": "customer.models",
        "isExtraImport": true,
        "detail": "customer.models",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "detech_language",
        "importPath": "customer.views",
        "description": "customer.views",
        "isExtraImport": true,
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "Path",
        "importPath": "pathlib",
        "description": "pathlib",
        "isExtraImport": true,
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "admin",
        "importPath": "django.contrib",
        "description": "django.contrib",
        "isExtraImport": true,
        "detail": "django.contrib",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "path",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "include",
        "importPath": "django.urls",
        "description": "django.urls",
        "isExtraImport": true,
        "detail": "django.urls",
        "documentation": {}
    },
    {
        "label": "get_wsgi_application",
        "importPath": "django.core.wsgi",
        "description": "django.core.wsgi",
        "isExtraImport": true,
        "detail": "django.core.wsgi",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "migrations",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "models",
        "importPath": "django.db",
        "description": "django.db",
        "isExtraImport": true,
        "detail": "django.db",
        "documentation": {}
    },
    {
        "label": "django.db.models.deletion",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "django.db.models.deletion",
        "description": "django.db.models.deletion",
        "detail": "django.db.models.deletion",
        "documentation": {}
    },
    {
        "label": "AppConfig",
        "importPath": "django.apps",
        "description": "django.apps",
        "isExtraImport": true,
        "detail": "django.apps",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "django.test",
        "description": "django.test",
        "isExtraImport": true,
        "detail": "django.test",
        "documentation": {}
    },
    {
        "label": "render",
        "importPath": "django.shortcuts",
        "description": "django.shortcuts",
        "isExtraImport": true,
        "detail": "django.shortcuts",
        "documentation": {}
    },
    {
        "label": "api_view",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "action",
        "importPath": "rest_framework.decorators",
        "description": "rest_framework.decorators",
        "isExtraImport": true,
        "detail": "rest_framework.decorators",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "rest_framework.response",
        "description": "rest_framework.response",
        "isExtraImport": true,
        "detail": "rest_framework.response",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "OpenAI",
        "importPath": "openai",
        "description": "openai",
        "isExtraImport": true,
        "detail": "openai",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timedelta",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "APIView",
        "importPath": "rest_framework.views",
        "description": "rest_framework.views",
        "isExtraImport": true,
        "detail": "rest_framework.views",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "django.utils",
        "description": "django.utils",
        "isExtraImport": true,
        "detail": "django.utils",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Sum",
        "importPath": "django.db.models",
        "description": "django.db.models",
        "isExtraImport": true,
        "detail": "django.db.models",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "annotations",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "site",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "site",
        "description": "site",
        "detail": "site",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "chatbot.asgi",
        "description": "chatbot.asgi",
        "peekOfCode": "application = get_asgi_application()",
        "detail": "chatbot.asgi",
        "documentation": {}
    },
    {
        "label": "CustomMiddleware",
        "kind": 6,
        "importPath": "chatbot.middleware",
        "description": "chatbot.middleware",
        "peekOfCode": "class CustomMiddleware:\n    def __init__(self, get_response):\n        self.get_response = get_response\n    def __call__(self, request):\n        try:\n            data = json.loads(request.body)\n            print(data)\n            try:\n                customer = Customer.objects.get(sender_id=data['sender_id'])\n            except:",
        "detail": "chatbot.middleware",
        "documentation": {}
    },
    {
        "label": "BASE_DIR",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "BASE_DIR = Path(__file__).resolve().parent.parent\n# Quick-start development settings - unsuitable for production\n# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/\n# SECURITY WARNING: keep the secret key used in production secret!\nSECRET_KEY = 'django-insecure-%)t_+bf+6hbviayks%!-g2zf&(fr(2h4fkk2%6cc1p^&+xbai9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "SECRET_KEY",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "SECRET_KEY = 'django-insecure-%)t_+bf+6hbviayks%!-g2zf&(fr(2h4fkk2%6cc1p^&+xbai9'\n# SECURITY WARNING: don't run with debug turned on in production!\nDEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "DEBUG",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "DEBUG = True\nALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "ALLOWED_HOSTS",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "ALLOWED_HOSTS = [\"*\"]\n# Application definition\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    #libs",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "INSTALLED_APPS",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "INSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    #libs\n    'rest_framework',\n    #apps",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "MIDDLEWARE",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "MIDDLEWARE = [\n    'django.middleware.security.SecurityMiddleware',\n    'django.contrib.sessions.middleware.SessionMiddleware',\n    'django.middleware.common.CommonMiddleware',\n    'django.middleware.csrf.CsrfViewMiddleware',\n    'django.contrib.auth.middleware.AuthenticationMiddleware',\n    'django.contrib.messages.middleware.MessageMiddleware',\n    'django.middleware.clickjacking.XFrameOptionsMiddleware',\n    'chatbot.middleware.CustomMiddleware'\n]",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "ROOT_URLCONF",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "ROOT_URLCONF = 'chatbot.urls'\nTEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "TEMPLATES",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "TEMPLATES = [\n    {\n        'BACKEND': 'django.template.backends.django.DjangoTemplates',\n        'DIRS': [],\n        'APP_DIRS': True,\n        'OPTIONS': {\n            'context_processors': [\n                'django.template.context_processors.debug',\n                'django.template.context_processors.request',\n                'django.contrib.auth.context_processors.auth',",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "WSGI_APPLICATION",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "WSGI_APPLICATION = 'chatbot.wsgi.application'\n# Database\n# https://docs.djangoproject.com/en/4.2/ref/settings/#databases\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "DATABASES",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "DATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.sqlite3',\n        'NAME': BASE_DIR / 'db.sqlite3',\n    }\n}\n# Password validation\n# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators\nAUTH_PASSWORD_VALIDATORS = [\n    {",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "AUTH_PASSWORD_VALIDATORS",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "AUTH_PASSWORD_VALIDATORS = [\n    {\n        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',\n    },\n    {\n        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',\n    },",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "LANGUAGE_CODE",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "LANGUAGE_CODE = 'en-us'\nUSE_TZ = True\nTIME_ZONE = 'Europe/London'\nUSE_I18N = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "USE_TZ",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "USE_TZ = True\nTIME_ZONE = 'Europe/London'\nUSE_I18N = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAPPEND_SLASH = False",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "TIME_ZONE",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "TIME_ZONE = 'Europe/London'\nUSE_I18N = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAPPEND_SLASH = False",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "USE_I18N",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "USE_I18N = True\n# Static files (CSS, JavaScript, Images)\n# https://docs.djangoproject.com/en/4.2/howto/static-files/\nSTATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAPPEND_SLASH = False",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "STATIC_URL",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "STATIC_URL = 'static/'\n# Default primary key field type\n# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field\nDEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAPPEND_SLASH = False",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "DEFAULT_AUTO_FIELD",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'\nAPPEND_SLASH = False",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "APPEND_SLASH",
        "kind": 5,
        "importPath": "chatbot.settings",
        "description": "chatbot.settings",
        "peekOfCode": "APPEND_SLASH = False",
        "detail": "chatbot.settings",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "chatbot.urls",
        "description": "chatbot.urls",
        "peekOfCode": "urlpatterns = [\n    path('admin/', admin.site.urls),\n    path('customer/', include('customer.urls'))\n]",
        "detail": "chatbot.urls",
        "documentation": {}
    },
    {
        "label": "application",
        "kind": 5,
        "importPath": "chatbot.wsgi",
        "description": "chatbot.wsgi",
        "peekOfCode": "application = get_wsgi_application()",
        "detail": "chatbot.wsgi",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "customer.migrations.0001_initial",
        "description": "customer.migrations.0001_initial",
        "peekOfCode": "class Migration(migrations.Migration):\n    initial = True\n    dependencies = [\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='Customer',\n            fields=[\n                ('sender_id', models.TextField(primary_key=True, serialize=False)),\n                ('language', models.TextField(default='vn')),",
        "detail": "customer.migrations.0001_initial",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "customer.migrations.0002_alter_customer_language",
        "description": "customer.migrations.0002_alter_customer_language",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('customer', '0001_initial'),\n    ]\n    operations = [\n        migrations.AlterField(\n            model_name='customer',\n            name='language',\n            field=models.TextField(default='Vietnamese'),\n        ),",
        "detail": "customer.migrations.0002_alter_customer_language",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "customer.migrations.0003_customer_sum_reservation_customer_time_end_and_more",
        "description": "customer.migrations.0003_customer_sum_reservation_customer_time_end_and_more",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('customer', '0002_alter_customer_language'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='customer',\n            name='sum_reservation',\n            field=models.IntegerField(default=0),\n        ),",
        "detail": "customer.migrations.0003_customer_sum_reservation_customer_time_end_and_more",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "customer.migrations.0004_history",
        "description": "customer.migrations.0004_history",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('customer', '0003_customer_sum_reservation_customer_time_end_and_more'),\n    ]\n    operations = [\n        migrations.CreateModel(\n            name='History',\n            fields=[\n                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),\n                ('time_start', models.DateTimeField(blank=True, null=True)),",
        "detail": "customer.migrations.0004_history",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "customer.migrations.0005_customer_channel_history_channel",
        "description": "customer.migrations.0005_customer_channel_history_channel",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('customer', '0004_history'),\n    ]\n    operations = [\n        migrations.AddField(\n            model_name='customer',\n            name='channel',\n            field=models.TextField(default='livechat'),\n        ),",
        "detail": "customer.migrations.0005_customer_channel_history_channel",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "customer.migrations.0006_remove_history_channel",
        "description": "customer.migrations.0006_remove_history_channel",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('customer', '0005_customer_channel_history_channel'),\n    ]\n    operations = [\n        migrations.RemoveField(\n            model_name='history',\n            name='channel',\n        ),\n    ]",
        "detail": "customer.migrations.0006_remove_history_channel",
        "documentation": {}
    },
    {
        "label": "Migration",
        "kind": 6,
        "importPath": "customer.migrations.0007_rename_custumer_history_customer",
        "description": "customer.migrations.0007_rename_custumer_history_customer",
        "peekOfCode": "class Migration(migrations.Migration):\n    dependencies = [\n        ('customer', '0006_remove_history_channel'),\n    ]\n    operations = [\n        migrations.RenameField(\n            model_name='history',\n            old_name='custumer',\n            new_name='customer',\n        ),",
        "detail": "customer.migrations.0007_rename_custumer_history_customer",
        "documentation": {}
    },
    {
        "label": "CustomerConfig",
        "kind": 6,
        "importPath": "customer.apps",
        "description": "customer.apps",
        "peekOfCode": "class CustomerConfig(AppConfig):\n    default_auto_field = 'django.db.models.BigAutoField'\n    name = 'customer'",
        "detail": "customer.apps",
        "documentation": {}
    },
    {
        "label": "Customer",
        "kind": 6,
        "importPath": "customer.models",
        "description": "customer.models",
        "peekOfCode": "class Customer(models.Model): \n    sender_id = models.TextField(primary_key=True)\n    language = models.TextField(default=\"Vietnamese\")\n    sum_reservation = models.IntegerField(default=0)\n    time_start = models.DateTimeField(null=True, blank=True)\n    time_end = models.DateTimeField(null=True, blank=True)\n    channel = models.TextField(default=\"livechat\")\nclass History(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    time_start = models.DateTimeField(null=True, blank=True)",
        "detail": "customer.models",
        "documentation": {}
    },
    {
        "label": "History",
        "kind": 6,
        "importPath": "customer.models",
        "description": "customer.models",
        "peekOfCode": "class History(models.Model):\n    customer = models.ForeignKey(Customer, on_delete=models.CASCADE)\n    time_start = models.DateTimeField(null=True, blank=True)\n    time_end = models.DateTimeField(null=True, blank=True)",
        "detail": "customer.models",
        "documentation": {}
    },
    {
        "label": "urlpatterns",
        "kind": 5,
        "importPath": "customer.urls",
        "description": "customer.urls",
        "peekOfCode": "urlpatterns = [\n    path('change_message', views.change_message),\n    path('change_menu', views.change_menu),\n    path('clean_data', views.clean_data), \n    path('send_notifi', views.send_notifi), \n    path('save_data', views.save_data), \n    path('cancel', views.cancel), \n    path('check', views.check), \n    path('language', views.language), \n    path('cron', views.cron), ",
        "detail": "customer.urls",
        "documentation": {}
    },
    {
        "label": "openai",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def openai(prompt):\n    response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo-1106\",\n        response_format={ \"type\": \"json_object\" },\n        messages=[\n            {\"role\": \"system\", \"content\": \"You are a helpful assistant designed to output JSON.\"},\n            {\"role\": \"user\", \"content\": prompt}\n        ]\n    )\n    print(prompt)",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "detech_language",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def detech_language(content):\n    prompt = f\"\"\"\n    I have the following text, help me identify the language used in this text is 'Vietnamese', 'English' or '', provide the most common language:\n    [{content}]\n    Provide the unique language (Ex: 'English')\n    If unable to determine language, return value of language is ''.\n    Return the answer with the key 'language'.\n    \"\"\"\n    return openai(prompt)\ndef translate_language(customer, content):",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "translate_language",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def translate_language(customer, content):\n    prompt = f\"\"\"\n    I have the following dictionary, help me translate the values of this dictionary into  {customer.language}:\n    [{content}]\n    For the values, ensure that the returned results are spelled correctly and use regular writing style.\n    For value, capitalize the first letter if the word is a person's name or starts a sentence; after punctuation marks if any, otherwise use lowercase letters.\n    Return values by {customer.language}\n    Return the answer with unchanged keys and translated values.\n    Return the only dict answer with the key 'result' and not use [].\n    \"\"\"",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "clean_text",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def clean_text(content): \n    prompt = f\"\"\"\n    I have a dictionary here, and there's a section with keys and values where the values are not returning in the correct data type.\n    [{content}]\n    - For the values, ensure that the returned results are spelled correctly and use regular writing style.\n    - With the 'order_date' key and the 'order_date_end' key, take the value of the key and adjust it to the correct format %d-%m-%Y %H:%M.\n    - With the key 'number_people,' retrieve the meaningful numeric content within the value of the key and convert it to the correct integer format.\n    - For value, capitalize the first letter if the word is a person's name or starts a sentence; after punctuation marks if any, otherwise use lowercase letters.\n    - Return the only dict answer with the key 'result'.\n    \"\"\"",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "change_message",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def change_message(request):\n    customer = request.customer\n    to_translate = json.dumps({'message': request.data['message']}) \n    try:\n        return Response({\"set_attributes\":  translate_language(customer, to_translate)['result']}) \n    except: \n        return Response({\"set_attributes\": json.loads(to_translate)}) \n@api_view(['POST'])\ndef change_menu(request): \n    customer = request.customer",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "change_menu",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def change_menu(request): \n    customer = request.customer\n    to_translate = request.data\n    to_translate.pop('sender_id')\n    to_translate.pop('sender_input')\n    to_translate.pop('channel')\n    to_translate = json.dumps(to_translate)  \n    try:\n        return Response({\"set_attributes\":  translate_language(customer, to_translate)['result']}) \n    except: ",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "clean_data",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def clean_data(request):\n    customer = request.customer  \n    content = json.dumps(\n        {\n            'order_date': request.data['order_date'], \n            'order_date_end': request.data['order_date_end'], \n            'number_people': request.data['number_people'],\n            'name_people': request.data['name_people'], \n            'phone_people': request.data['phone_people']\n        }",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "clean_data",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def clean_data(request):\n    customer = request.customer  \n    content = json.dumps(\n        {\n            'order_date': request.data['order_date'], \n            'order_date_end': request.data['order_date_end'], \n            'number_people': request.data['number_people'],\n            'name_people': request.data['name_people'], \n            'phone_people': request.data['phone_people']\n        }",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "save_data",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def save_data(request): \n    customer = request.customer\n    customer.time_start =   None\n    customer.time_end =  None\n    customer.sum_reservation = 0\n    customer.save()\n    customer.time_start =   datetime.strptime(request.data['order_date'], '%d-%m-%Y %H:%M')\n    customer.time_end =   datetime.strptime(request.data['order_date_end'], '%d-%m-%Y %H:%M')\n    customer.sum_reservation = int(request.data['number_people']) // 4 + (int(request.data['number_people']) % 4 > 0)\n    customers = Customer.objects.filter(time_start__lte=customer.time_end, time_end__gte=customer.time_start)",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "cancel",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def cancel(request):\n    try:\n        customer = request.customer\n        customer.sum_reservation = 0\n        customer.time_start = None\n        customer.time_end = None\n        customer.save()\n    except Exception as e:\n        print(str(e))\n    return Response(status=200)",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "check",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def check(request): \n    try:\n        customer = request.customer \n        time_now = datetime.now() + timedelta(hours=7)\n        time_now = time_now.strftime('%d-%m-%Y %H:%M')\n        if customer.time_start >= time_now:\n            History.objects.create(\n                customer = customer,\n                time_start = customer.time_start,\n                time_end = customer.time_end",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "send_notifi",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def send_notifi(request): \n    customer = request.customer\n    time_now = datetime.now() + timedelta(hours=7)\n    two_hours_ago = time_now - timedelta(hours=2)\n    success = 0\n    histories = History.objects.filter(custumer=customer, time_end__gt=two_hours_ago)\n    if len(histories) > 0:\n        History.objects.filter(custumer=customer, time_end__gt=two_hours_ago).delete()\n        success = 1\n    return Response({",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "language",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def language(request):\n    customer = request.customer\n    customer.language = request.data['language']\n    customer.save()\n    return Response({\n        'set_attributes': {\n            'success': 1\n        }\n    })\n@api_view(['GET'])",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "cron",
        "kind": 2,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "def cron(request):\n    time_now = datetime.now() + timedelta(hours=7)\n    customers = Customer.objects.filter(time_start__lte=time_now)\n    for customer in customers: \n        History.objects.create(\n            customer = customer,\n            time_start = customer.time_start,\n            time_end = customer.time_end\n        )\n        customer.time_start = None",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "customer.views",
        "description": "customer.views",
        "peekOfCode": "client = OpenAI(api_key=os.environ.get(\"OPENAI_APIKEY\"))\nimport time\ndef openai(prompt):\n    response = client.chat.completions.create(\n        model=\"gpt-3.5-turbo-1106\",\n        response_format={ \"type\": \"json_object\" },\n        messages=[\n            {\"role\": \"system\", \"content\": \"You are a helpful assistant designed to output JSON.\"},\n            {\"role\": \"user\", \"content\": prompt}\n        ]",
        "detail": "customer.views",
        "documentation": {}
    },
    {
        "label": "bin_dir",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "bin_dir = os.path.dirname(abs_file)\nbase = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "base",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "base = bin_dir[: -len(\"bin\") - 1]  # strip away the bin part from the __file__, plus the path separator\n# prepend bin to PATH (this file is inside the bin directory)\nos.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"PATH\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"PATH\"] = os.pathsep.join([bin_dir, *os.environ.get(\"PATH\", \"\").split(os.pathsep)])\nos.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV\"] = base  # virtual env is right above bin directory\nos.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "os.environ[\"VIRTUAL_ENV_PROMPT\"]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "os.environ[\"VIRTUAL_ENV_PROMPT\"] = \"\" or os.path.basename(base)  # noqa: SIM222\n# add the virtual environments libraries to the host python import mechanism\nprev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "prev_length",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "prev_length = len(sys.path)\nfor lib in \"../lib/python3.11/site-packages\".split(os.pathsep):\n    path = os.path.realpath(os.path.join(bin_dir, lib))\n    site.addsitedir(path.decode(\"utf-8\") if \"\" else path)\nsys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.path[:]",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.path[:] = sys.path[prev_length:] + sys.path[0:prev_length]\nsys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.real_prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.real_prefix = sys.prefix\nsys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "sys.prefix",
        "kind": 5,
        "importPath": "venv.bin.activate_this",
        "description": "venv.bin.activate_this",
        "peekOfCode": "sys.prefix = base",
        "detail": "venv.bin.activate_this",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "manage",
        "description": "manage",
        "peekOfCode": "def main():\n    \"\"\"Run administrative tasks.\"\"\"\n    os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'chatbot.settings')\n    try:\n        from django.core.management import execute_from_command_line\n    except ImportError as exc:\n        raise ImportError(\n            \"Couldn't import Django. Are you sure it's installed and \"\n            \"available on your PYTHONPATH environment variable? Did you \"\n            \"forget to activate a virtual environment?\"",
        "detail": "manage",
        "documentation": {}
    },
    {
        "label": "client",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "client = OpenAI(api_key=os.environ.get(\"OPENAI_APIKEY\"))\nprompt = \"\"\"\nI have the following text, help me identify the language used in this text:\n[Wi-Fi is a family of wireless network protocols based on the IEEE 802.11 family of standards, which are commonly used for local area networking of devices and Internet access, allowing nearby digital devices to exchange data by radio waves.]\nReturn the answer with the key 'language'.\n\"\"\"\nresponse = client.chat.completions.create(\n  model=\"gpt-3.5-turbo-1106\",\n  response_format={ \"type\": \"json_object\" },\n  messages=[",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "prompt",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "prompt = \"\"\"\nI have the following text, help me identify the language used in this text:\n[Wi-Fi is a family of wireless network protocols based on the IEEE 802.11 family of standards, which are commonly used for local area networking of devices and Internet access, allowing nearby digital devices to exchange data by radio waves.]\nReturn the answer with the key 'language'.\n\"\"\"\nresponse = client.chat.completions.create(\n  model=\"gpt-3.5-turbo-1106\",\n  response_format={ \"type\": \"json_object\" },\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant designed to output JSON.\"},",
        "detail": "test",
        "documentation": {}
    },
    {
        "label": "response",
        "kind": 5,
        "importPath": "test",
        "description": "test",
        "peekOfCode": "response = client.chat.completions.create(\n  model=\"gpt-3.5-turbo-1106\",\n  response_format={ \"type\": \"json_object\" },\n  messages=[\n    {\"role\": \"system\", \"content\": \"You are a helpful assistant designed to output JSON.\"},\n    {\"role\": \"user\", \"content\": prompt}\n  ]\n)\nprint(response.choices[0].message.content)",
        "detail": "test",
        "documentation": {}
    }
]